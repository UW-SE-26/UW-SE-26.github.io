{"version":3,"sources":["charts/ExampleLineChart.js","charts/VerticalBarChart.js","charts/HorizontalBarChart.js","charts/VerticalMultiBarChart.js","charts/HorizontalMultiBarChart.js","charts/WeightedScatterPlot.js","charts/NumberlineChart.js","charts/BoxAndWhiskerPlot.js","data.js","pages/AboutPage.js","pages/AcademicsPage.js","pages/DemographicsPage.js","pages/SexDrugsPage.js","pages/HousingPage.js","pages/MiscPage.js","components/Header.js","pages/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["ExampleLineChart","props","useState","crosshairValues","setCrosshairValues","height","width","onMouseLeave","data","onNearestX","value","index","x","map","d","y","values","VerticalBarChart","xType","HorizontalBarChart","yType","VerticalMultiBarChart","stackBy","HorizontalMultiBarChart","WeightedScatterPlot","className","opacity","sizeRange","NumberlineChart","rawdata","totalLabels","length","totalRecords","i","seperation","FormattedArray","LabelsArray","tX","newX","push","x0","y0","label","style","fontSize","arrayToUse","labelAnchorX","BoxAndWhiskerPlot","barThickness","plotMaxY","MainRectSeriesArray","WhiskerSeriesArray","MedianRectSeriesArray","LabelSeriesArray","workingList","sort","a","b","workingListLength","medianIndex","upperLimit","lowerLimit","lowerHalf","slice","upperHalf","findMedian","ar","halfLocation","median","lowerQuartile","upperQuartile","minValue","maxValue","whiskerlocation","whiskerVariance","overallMedian","yVariance","xDomain","yDomain","hideTicks","color","data_example_line","data_example_weighted_scatterplot","size","data_example_vertical_bar","data_example_horizontal_bar","data_example_vertical_multibar","data_example_horizontal_multibar","data_example_numberlinechart","data_example_box_and_whisker_plot","AboutPage","AcademicsPage","DemographicsPage","SexDrugsPage","HousingPage","MiscPage","Header","activeClass","page","activePage","class","onClick","setAbout","setDemographics","setAcademics","setHousing","setSexDrugs","setMisc","MainPage","setPage","renderPage","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ce87a38.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  Crosshair,\r\n  LineSeries,\r\n} from \"react-vis\";\r\n\r\nfunction ExampleLineChart(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n\r\n  return (\r\n    <div>\r\n      <XYPlot\r\n        height={300}\r\n        width={300}\r\n        onMouseLeave={() => setCrosshairValues([])}\r\n      >\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis />\r\n        <YAxis />\r\n        <LineSeries\r\n          data={props.data}\r\n          onNearestX={(value, { index }) =>\r\n            setCrosshairValues([\r\n              {\r\n                x: props.data.map((d) => d[\"x\"])[index],\r\n                y: props.data.map((d) => d[\"y\"])[index],\r\n              },\r\n            ])\r\n          }\r\n        />\r\n        <Crosshair values={crosshairValues} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExampleLineChart;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  Crosshair,\r\n  VerticalBarSeries,\r\n} from \"react-vis\";\r\n\r\nfunction VerticalBarChart(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n\r\n  return (\r\n    <div>\r\n      <XYPlot\r\n        height={300}\r\n        width={300}\r\n        xType=\"ordinal\"\r\n        onMouseLeave={() => setCrosshairValues([])}\r\n      >\r\n        <HorizontalGridLines />\r\n        <VerticalGridLines />\r\n        <XAxis />\r\n        <YAxis />\r\n        <VerticalBarSeries\r\n          data={props.data}\r\n          onNearestX={(value, { index }) =>\r\n            setCrosshairValues([\r\n              {\r\n                x: props.data.map((d) => d[\"x\"])[index],\r\n                y: props.data.map((d) => d[\"y\"])[index],\r\n              },\r\n            ])\r\n          }\r\n        />\r\n        <Crosshair values={crosshairValues} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VerticalBarChart;\r\n","import React from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  HorizontalBarSeries,\r\n} from \"react-vis\";\r\n\r\nfunction HorizontalBarChart(props) {\r\n  return (\r\n    <div>\r\n      <XYPlot height={300} width={300} yType=\"ordinal\">\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis />\r\n        <YAxis />\r\n        <HorizontalBarSeries data={props.data} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HorizontalBarChart;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  VerticalBarSeries,\r\n  Crosshair,\r\n} from \"react-vis\";\r\n\r\nfunction VerticalMultiBarChart(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n\r\n  return (\r\n    <div>\r\n      <XYPlot width={300} height={300} stackBy=\"y\" xType=\"ordinal\">\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis />\r\n        <YAxis />\r\n        <VerticalBarSeries\r\n          data={props.data[0]}\r\n          onNearestX={(value, { index }) =>\r\n            setCrosshairValues(props.data.map((d) => d[index]))\r\n          }\r\n        />\r\n        <VerticalBarSeries data={props.data[1]} />\r\n        <Crosshair values={crosshairValues} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VerticalMultiBarChart;\r\n","import React from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  HorizontalBarSeries,\r\n} from \"react-vis\";\r\n\r\nfunction HorizontalMultiBarChart(props) {\r\n  return (\r\n    <div>\r\n      <XYPlot width={300} height={300} stackBy=\"x\" yType=\"ordinal\">\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis />\r\n        <YAxis />\r\n        <HorizontalBarSeries data={props.data[0]} />\r\n        <HorizontalBarSeries data={props.data[1]} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HorizontalMultiBarChart;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  Crosshair,\r\n  MarkSeries,\r\n} from \"react-vis\";\r\n\r\nfunction WeightedScatterPlot(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n\r\n  return (\r\n    <div>\r\n      <XYPlot width={300} height={300}>\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis />\r\n        <YAxis />\r\n        <MarkSeries\r\n          className=\"weighted-scatterplot\"\r\n          opacity=\"0.6\"\r\n          sizeRange={[5, 15]}\r\n          data={props.data}\r\n          onNearestX={(value, { index }) =>\r\n            setCrosshairValues([\r\n              {\r\n                x: props.data.map((d) => d[\"x\"])[index],\r\n                y: props.data.map((d) => d[\"y\"])[index],\r\n              },\r\n            ])\r\n          }\r\n        />\r\n        <Crosshair values={crosshairValues} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeightedScatterPlot;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  Crosshair,\r\n  VerticalRectSeries,\r\n  LabelSeries,\r\n} from \"react-vis\";\r\n\r\nfunction NumberlineChart(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n\r\n  //Accept a standard data.js x,y array, make it easier to type\r\n  const rawdata = props.data\r\n  const totalLabels = rawdata.length\r\n\r\n  //Total number of respondents and the seperation between blocks\r\n  var totalRecords = 0\r\n  for (let i=0; i<totalLabels; i++) {\r\n    totalRecords = totalRecords + rawdata[i]['y']\r\n  }\r\n  const seperation = totalRecords/50\r\n\r\n  //Format the Array so that RectSeries can use it, and take out the label for LabelSeries while defining y pos and fontsize\r\n  var FormattedArray = []\r\n  var LabelsArray = []\r\n  var tX = 0\r\n  for (let i=0; i<totalLabels; i++) {\r\n    var newX = tX + rawdata[i]['y']\r\n    FormattedArray.push({x0: tX, x: newX, y0: 0, y:10})\r\n    LabelsArray.push({x: ((tX+newX)/2), y: -2, label: rawdata[i]['x'], style: {fontSize: 10}})\r\n    tX = newX + seperation\r\n  }\r\n\r\n  const arrayToUse = FormattedArray\r\n\r\n  return (\r\n    <div>\r\n      <XYPlot\r\n        height={150}\r\n        width={450}\r\n        onMouseLeave={() => setCrosshairValues([])}\r\n      >\r\n        <LabelSeries \r\n          data= {LabelsArray} \r\n          labelAnchorX= {'middle'}\r\n        />\r\n        <VerticalRectSeries\r\n          data= {arrayToUse}\r\n          onNearestX={(value, { index }) =>\r\n            setCrosshairValues([\r\n              {\r\n                x: LabelsArray.map((d) => d[\"label\"])[index],\r\n                y: rawdata.map((d) => d[\"y\"])[index],\r\n              },\r\n            ])\r\n          }\r\n        />\r\n        <Crosshair values={crosshairValues} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NumberlineChart;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  Crosshair,\r\n  VerticalRectSeries,\r\n  WhiskerSeries,\r\n  LabelSeries\r\n} from \"react-vis\";\r\n\r\nfunction BoxAndWhiskerPlot(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n\r\n  //Accept an array with x Labels, and a list of y values per label, Make it easier to type\r\n  const rawdata = props.data\r\n  const totalLabels = rawdata.length\r\n\r\n  //Define bar thickness and the seperation between each bar. Also define median thickness. Also monitor the max value in order to manage yDomain\r\n  const barThickness = 3.5\r\n  const seperation = barThickness/3\r\n  const medianThicknessHalf = 0.1\r\n  var plotMaxY = 0\r\n\r\n  var tX = seperation\r\n  var MainRectSeriesArray = []\r\n  var WhiskerSeriesArray = []\r\n  var MedianRectSeriesArray = []\r\n  var LabelSeriesArray = []\r\n  for (let i=0; i<totalLabels; i++) {\r\n    var newX = tX + barThickness\r\n\r\n    //Prepare data for the main RectSeries\r\n    var workingList = (rawdata[i]['y']).sort((a, b) => a - b)\r\n    var workingListLength = workingList.length\r\n    var medianIndex = (workingListLength)/2\r\n\r\n    if (medianIndex % 2 != 0) {\r\n      var upperLimit = medianIndex - 0.5\r\n      var lowerLimit = medianIndex + 0.5\r\n    } else {\r\n      var upperLimit = medianIndex\r\n      var lowerLimit = medianIndex\r\n    }\r\n    var lowerHalf = workingList.slice(0,upperLimit + 1)\r\n    var upperHalf = workingList.slice(lowerLimit, workingListLength)\r\n\r\n    function findMedian(ar) {\r\n      var halfLocation = (ar.length)/2\r\n      if (halfLocation % 1 != 0) {\r\n        var median = ar[halfLocation - 0.5]\r\n      } else {\r\n        var median = (ar[halfLocation-1] + ar[halfLocation])/2\r\n      }\r\n      return (median)\r\n    }\r\n\r\n    var lowerQuartile = findMedian(lowerHalf)\r\n    var upperQuartile = findMedian(upperHalf)\r\n\r\n    //Prepare data for WhiskerSeries. Also update maxYvalue for yDomain\r\n    var minValue = workingList[0]\r\n    var maxValue = workingList[workingListLength-1]\r\n    var whiskerlocation = (minValue + maxValue)/2\r\n    var whiskerVariance = (whiskerlocation - minValue)*2\r\n    if (maxValue > plotMaxY) {plotMaxY = maxValue}\r\n\r\n    //Prepare data for the median's RectSeries\r\n    var overallMedian = findMedian(workingList)\r\n\r\n    //Push coordinates\r\n    MainRectSeriesArray.push({x0: tX, x: newX, y0: lowerQuartile, y:upperQuartile})\r\n    WhiskerSeriesArray.push({ x: ((tX + newX)/2), y: whiskerlocation, yVariance: whiskerVariance})\r\n    MedianRectSeriesArray.push({x0: tX, x: newX, y0: (overallMedian - medianThicknessHalf), y:(overallMedian + medianThicknessHalf), median: overallMedian})\r\n    LabelSeriesArray.push({x: ((tX + newX)/2), y: -5.5, label: rawdata[i]['x'], style: {fontSize: 10}})\r\n\r\n    tX = newX + seperation\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <XYPlot\r\n        height={300}\r\n        width={(totalLabels*(barThickness*16.5))}\r\n        xDomain = {[0,((totalLabels*(barThickness*1.35))+(seperation*1.1))]}\r\n        yDomain = {[0,plotMaxY*1.1]}\r\n        onMouseLeave={() => setCrosshairValues([])}\r\n      >\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis hideTicks/>\r\n        <YAxis />\r\n        <LabelSeries \r\n          data= {LabelSeriesArray} \r\n          labelAnchorX= {'middle'}\r\n        />\r\n        <VerticalRectSeries\r\n          data= {MainRectSeriesArray}\r\n          onNearestX={(value, { index }) =>\r\n            setCrosshairValues([\r\n              {\r\n                x: LabelSeriesArray.map((d) => d[\"label\"])[index],\r\n                y: MedianRectSeriesArray.map((d) => d[\"median\"])[index],\r\n              },\r\n            ])\r\n          }\r\n        />\r\n        <VerticalRectSeries\r\n          color= {'#164b80'}\r\n          data= {MedianRectSeriesArray}\r\n        />\r\n        <WhiskerSeries \r\n          className=\"whisker-series-example\"\r\n          data= {WhiskerSeriesArray}\r\n          color= {'#164b80'}\r\n        />\r\n        <Crosshair values={crosshairValues} />\r\n      </XYPlot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BoxAndWhiskerPlot;\r\n","// Example Data\r\n\r\nconst data_example_line = [\r\n  { x: 0, y: 8 },\r\n  { x: 1, y: 5 },\r\n  { x: 2, y: 4 },\r\n  { x: 3, y: 9 },\r\n  { x: 4, y: 1 },\r\n  { x: 5, y: 7 },\r\n  { x: 6, y: 6 },\r\n  { x: 7, y: 3 },\r\n  { x: 8, y: 2 },\r\n  { x: 9, y: 0 },\r\n];\r\n\r\nconst data_example_weighted_scatterplot = [\r\n  { x: 1, y: 10, size: 15 },\r\n  { x: 1.7, y: 12, size: 10 },\r\n  { x: 2, y: 5, size: 1 },\r\n  { x: 3, y: 15, size: 12 },\r\n  { x: 2.5, y: 10, size: 2 },\r\n  { x: 3.5, y: 7, size: 4 },\r\n  { x: 4.5, y: 8, size: 25 },\r\n  { x: 5.5, y: 7, size: 23 },\r\n];\r\n\r\nconst data_example_vertical_bar = [\r\n  { x: 1, y: 10 },\r\n  { x: 2, y: 5 },\r\n  { x: 3, y: 15 },\r\n];\r\n\r\nconst data_example_horizontal_bar = [\r\n  { y: 1, x: 3 },\r\n  { y: 2, x: 7 },\r\n  { y: 3, x: 10 },\r\n  { y: 4, x: 9 },\r\n  { y: 5, x: 15 },\r\n];\r\n\r\nconst data_example_vertical_multibar = [\r\n  [\r\n    { x: 1, y: 10 },\r\n    { x: 2, y: 5 },\r\n    { x: 3, y: 15 },\r\n  ],\r\n  [\r\n    { x: 1, y: 12 },\r\n    { x: 2, y: 2 },\r\n    { x: 3, y: 11 },\r\n  ],\r\n];\r\n\r\nconst data_example_horizontal_multibar = [\r\n  [\r\n    { y: 1, x: 10 },\r\n    { y: 2, x: 5 },\r\n    { y: 3, x: 15 },\r\n  ],\r\n  [\r\n    { y: 1, x: 12 },\r\n    { y: 2, x: 2 },\r\n    { y: 3, x: 11 },\r\n  ],\r\n];\r\n\r\nconst data_example_numberlinechart = [\r\n  { x: 'Blue', y: 10 },\r\n  { x: 'Grey', y: 20 },\r\n  { x: 'Red', y: 30 }\r\n];\r\n\r\nconst data_example_box_and_whisker_plot = [\r\n  { x: 'Blue', y: [5,10,32,17,18,20,16] },\r\n  { x: 'Grey', y: [3,8,12,29,34,42,43,50,61,75] },\r\n  { x: 'Blue', y: [5,10,16,17,18,20,32] },\r\n  { x: 'Blue', y: [5,10,16,17,18,20,32] },\r\n];\r\n\r\n// Actual Survey Result Data\r\n\r\nexport {\r\n  data_example_line,\r\n  data_example_vertical_bar,\r\n  data_example_horizontal_bar,\r\n  data_example_vertical_multibar,\r\n  data_example_horizontal_multibar,\r\n  data_example_weighted_scatterplot,\r\n  data_example_numberlinechart,\r\n  data_example_box_and_whisker_plot\r\n};\r\n","import React from \"react\";\r\nimport ExampleLineChart from \"../charts/ExampleLineChart\";\r\nimport VerticalBarChart from \"../charts/VerticalBarChart\";\r\nimport HorizontalBarChart from \"../charts/HorizontalBarChart\";\r\nimport VerticalMultiBarChart from \"../charts/VerticalMultiBarChart\";\r\nimport HorizontalMultiBarChart from \"../charts/HorizontalMultiBarChart\";\r\nimport WeightedScatterPlot from \"../charts/WeightedScatterPlot\";\r\nimport NumberlineChart from \"../charts/NumberlineChart\";\r\nimport BoxAndWhiskerPlot from \"../charts/BoxAndWhiskerPlot\";\r\n\r\nimport {\r\n  data_example_line,\r\n  data_example_vertical_bar,\r\n  data_example_horizontal_bar,\r\n  data_example_vertical_multibar,\r\n  data_example_horizontal_multibar,\r\n  data_example_weighted_scatterplot,\r\n  data_example_numberlinechart,\r\n  data_example_box_and_whisker_plot\r\n} from \"../data\";\r\n\r\nfunction AboutPage() {\r\n  return (\r\n    <div>\r\n      About Page\r\n      <p>UW SE 26 Class Profile</p>\r\n      <ExampleLineChart data={data_example_line} />\r\n      <VerticalBarChart data={data_example_vertical_bar} />\r\n      <HorizontalBarChart data={data_example_horizontal_bar} />\r\n      <VerticalMultiBarChart data={data_example_vertical_multibar} />\r\n      <HorizontalMultiBarChart data={data_example_horizontal_multibar} />\r\n      <WeightedScatterPlot data={data_example_weighted_scatterplot} />\r\n      <NumberlineChart data={data_example_numberlinechart}/>\r\n      <BoxAndWhiskerPlot data={data_example_box_and_whisker_plot} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AboutPage;\r\n","import React from \"react\";\r\n\r\nfunction AcademicsPage() {\r\n  return (\r\n    <div>\r\n      <p>Academics Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AcademicsPage;","import React from \"react\";\r\n\r\nfunction DemographicsPage() {\r\n  return (\r\n    <div>\r\n      <p>Demographics Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DemographicsPage;","import React from \"react\";\r\n\r\nfunction SexDrugsPage() {\r\n  return (\r\n    <div>\r\n      <p>Sex/Drugs Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SexDrugsPage;","import React from \"react\";\r\n\r\nfunction HousingPage() {\r\n  return (\r\n    <div>\r\n      <p>Housing Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HousingPage;","import React from \"react\";\r\n\r\nfunction MiscPage() {\r\n  return (\r\n    <div>\r\n      <p>Miscellaneous Page</p>\r\n      Data that doesn't really fit into the other categories will go here.\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MiscPage;","import React from 'react';\r\nimport '../styling/Header.css';\r\n\r\nfunction Header(props) {\r\n\r\n    const activeClass = (page) => page === props.activePage && 'active';\r\n\r\n    return (\r\n        <div>\r\n            <header className={'main_header'}>\r\n                <h3>SE 2026 Profile</h3>\r\n                <div class={'spacer'} />\r\n                <button onClick={props.setAbout} className={activeClass('about')}>About</button>\r\n                <button onClick={props.setDemographics} className={activeClass('demographics')}>Demographics</button>\r\n                <button onClick={props.setAcademics} className={activeClass('academics')}>Academics</button>\r\n                <button onClick={props.setHousing} className={activeClass('housing')}>Housing</button>\r\n                <button onClick={props.setSexDrugs} className={activeClass('sexDrugs')}>Sex/Drugs</button>\r\n                <button onClick={props.setMisc} className={activeClass('misc')}> Misc</button>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport AboutPage from \"./AboutPage\";\r\nimport AcademicsPage from \"./AcademicsPage\";\r\nimport DemographicsPage from \"./DemographicsPage\";\r\nimport SexDrugsPage from \"./SexDrugsPage\";\r\nimport HousingPage from \"./HousingPage\";\r\nimport MiscPage from \"./MiscPage\";\r\nimport Header from \"../components/Header\";\r\n\r\nfunction MainPage() {\r\n  const [page, setPage] = useState('about');\r\n\r\n  const renderPage = () => {\r\n    switch (page) {\r\n      case 'academics':\r\n        return <AcademicsPage />;\r\n      case 'demographics':\r\n        return <DemographicsPage />;\r\n      case 'sexDrugs':\r\n        return <SexDrugsPage />;\r\n      case 'housing':\r\n        return <HousingPage />;\r\n      case 'misc':\r\n        return <MiscPage />;\r\n      default:\r\n        return <AboutPage />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header \r\n        setAbout={() => setPage('about')}\r\n        setAcademics={() => setPage('academics')}\r\n        setDemographics={() => setPage('demographics')}\r\n        setSexDrugs={() => setPage('sexDrugs')}\r\n        setHousing={() => setPage('housing')}\r\n        setMisc={() => setPage('misc')}\r\n        activePage={page}\r\n      />\r\n      {renderPage()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import \"./App.css\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport MainPage from \"./pages/MainPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/class-profile\">\r\n            <MainPage />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}